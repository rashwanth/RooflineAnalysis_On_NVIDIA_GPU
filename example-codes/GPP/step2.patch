11c11
<   complex(DPC) :: ssx_array_2, ssx_array_3, sch_array_2, sch_array_3
---
>   complex(DPC) :: ssx_array, sch_array
24c24
<   ! Write out to scalars since OpenACC does not currently support array reduction.
---
>   do iw = nstart, nend ! 2
26,33c26,30
<   ssx_array_2 = (0.0d0,0.0d0)
<   sch_array_2 = (0.0d0,0.0d0)
<   ssx_array_3 = (0.0d0,0.0d0)
<   sch_array_3 = (0.0d0,0.0d0)
< 
<   !$ACC PARALLEL PRESENT(I_eps_array, aqsntemp)
<   !$ACC LOOP GANG VECTOR reduction(+:ssx_array_2,sch_array_2,ssx_array_3,sch_array_3) collapse(3)
<   do n1_loc = 1, ntband_dist ! O(1000)
---
>      ssx_array = (0.0d0,0.0d0)
>      sch_array = (0.0d0,0.0d0)
> 
>      !$ACC PARALLEL PRESENT(I_eps_array, aqsntemp)
>      !$ACC LOOP GANG VECTOR reduction(+:ssx_array,sch_array) collapse(2)
37c34
<            do iw = nstart, nend ! 2
---
>            do n1_loc = 1, ntband_dist ! O(1000)
67,79c64,75
<               if (iw == 2) then
<                  ssx_array_2 = ssx_array_2 + vcoul_loc(igp) * occ_array(n1_loc) * ssx * matngmatmgp
<                  sch_array_2 = sch_array_2 + vcoul_loc(igp) * sch * matngmatmgp * 0.5d0
<               else 
<                  ssx_array_3 = ssx_array_3 + vcoul_loc(igp) * occ_array(n1_loc) * ssx * matngmatmgp
<                  sch_array_3 = sch_array_3 + vcoul_loc(igp) * sch * matngmatmgp * 0.5d0
<               end if
< 
<            end do ! iw
<         enddo ! n1_loc
<      enddo ! ig
<   enddo ! igp
<   !$ACC END PARALLEL
---
>               ssx_array = ssx_array + vcoul_loc(igp) * occ_array(n1_loc) * ssx * matngmatmgp
>               sch_array = sch_array + vcoul_loc(igp) * sch * matngmatmgp * 0.5d0
> 
>            enddo ! n1_loc
>         enddo ! ig
>      enddo ! igp
>      !$ACC END PARALLEL
> 
>      asxtemp(iw) = asxtemp(iw) - ssx_array
>      achtemp(iw) = achtemp(iw) + sch_array
> 
>   end do ! iw
86,91d81
< 
<   asxtemp(2) = asxtemp(2) - ssx_array_2
<   asxtemp(3) = asxtemp(3) - ssx_array_3
< 
<   achtemp(2) = achtemp(2) + sch_array_2
<   achtemp(3) = achtemp(3) + sch_array_3
